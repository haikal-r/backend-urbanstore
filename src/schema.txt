// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  uuid        String      @unique @default(uuid())  
  storeId     Int
  categoryId  Int
  name        String      @unique @db.VarChar(255)
  slug        String      
  price       Decimal
  description String?     @db.Text
  stock       Int
  images      Json
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  Store       Store       @relation(fields: [storeId], references: [id])
  Category    Category    @relation(fields: [categoryId], references: [id])

  @@index([storeId, categoryId, name, slug])
}

model Cart {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int     
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CartItem {
  id          Int         @id @default(autoincrement())
  cartId      Int
  cart        Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   Int         
  quantity    Int         @default(1)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

}

model User {
  id          Int      @id @default(autoincrement()) 
  uuid        String   @unique @default(uuid())
  name        String   @db.VarChar(100)
  username    String   @db.VarChar(100) 
  email       String   @unique(map: "email") @db.VarChar(255)
  address     String?  @db.VarChar(255)
  password    String?  @db.VarChar(255)
  picture     String?  @db.VarChar(100)
  stores      Store[]
  orders      Order[]
  carts       Cart[]
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

model Store {
  id          Int         @id @default(autoincrement())
  uuid        String      @unique @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  name        String      @unique @db.VarChar(255)
  slug        String      @unique
  description String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  products    Product[]
  orderItems  OrderItem[]

  @@index([userId])
}

model Category {
  id              Int         @id @default(autoincrement())
  name            String      @unique @db.VarChar(100)
  slug            String      @unique @db.VarChar(100)
  products        Product[]
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  CANCELED
}

model Order {
  id               String          @id 
  userId           Int
  User             User            @relation(fields: [userId], references: [id])
  totalPrice       Decimal
  token            String
  status           OrderStatus     @default(PENDING_PAYMENT)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  orderItems       OrderItem[]

  @@index([userId])
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  quantity         Int
  price            Int
  order            Order           @relation(fields: [orderId], references: [id])
  productId        Int             
  product          Product         @relation(fields: [productId], references: [id])
  storeId          Int          
  store            Store           @relation(fields: [storeId], references: [id])
  createdAt        DateTime        @default(now()) @db.Timestamp(0)
  updatedAt        DateTime        @default(now()) @db.Timestamp(0)

  @@index([orderId])
}